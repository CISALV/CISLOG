unit uDataConService;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.VCLUI.Wait,
  Data.DB, FireDAC.Comp.Client, FireDAC.Phys.FB, FireDAC.Phys.FBDef;

type
  TDataConService = class
  strict protected
    class var FInstance: TDataConService;
  private
    FConnection: TFDConnection;
    FQuery: TFDQuery;
    constructor CreatePrivate;
  public
    function ExecuteQuery(sql: String): TFDQuery;
    function GetQuery: TFDQuery;
    constructor Create;
    destructor Destroy; override;
    class function GetInstance: TDataConService;
  end;

implementation

{ TDataConService }

constructor TDataConService.Create;
begin
  raise Exception.Create
    ('Essa classe é um Singleton! Use o método GetInstance.');
end;

constructor TDataConService.CreatePrivate;
begin
  inherited Create;
  FConnection := TFDConnection.Create(nil);
  FQuery := TFDQuery.Create(nil);
  try
    FConnection.DriverName := 'FB';
    FConnection.Params.Add('Server=192.168.0.199');
    FConnection.Params.Add('Port=3050');
    FConnection.Params.Add('Protocol=TCPIP');
    FConnection.Params.Add('Database=C:\database\CISALV-3-2-1.FDB');
    FConnection.Params.Add('User_Name=SYSDBA');
    FConnection.Params.Add('Password=masterkey');
    FConnection.LoginPrompt := False;
    FConnection.Connected := True;
    FQuery.Connection := FConnection;
  except
    on E: Exception do
      raise Exception.Create('Falha ao Conectar com a base de dados: ' +
        E.Message);
  end;
end;

destructor TDataConService.Destroy;
begin
  FConnection.Free;
  FQuery.Free;
  inherited Destroy;
end;

class function TDataConService.GetInstance: TDataConService;
begin
  if not Assigned(FInstance) then
    FInstance := TDataConService.CreatePrivate;
  Result := FInstance;
end;

function TDataConService.GetQuery: TFDQuery;
begin
  Result := FQuery;
end;

function TDataConService.ExecuteQuery(sql: String): TFDQuery;
begin
  FQuery.Connection := FConnection;
  FQuery.sql.Clear;
  FQuery.sql.Add(sql);
  FQuery.Open;
  Result := FQuery;
end;

end.
